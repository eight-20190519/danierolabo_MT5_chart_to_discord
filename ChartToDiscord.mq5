#property strict

#define SILENT_MODE

//+------------------------------------------------------------------+
//| ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø: „Éú„Çø„É≥„ÅÆÂêçÂâç„Å®Ë°®Á§∫„ÉÜ„Ç≠„Çπ„Éà                     |
//+------------------------------------------------------------------+
string button_name = "chart_to_discord_button";
string button_text = "Discord„Å∏„Éù„Çπ„Éà";

//+------------------------------------------------------------------+
//| Discord Webhook URLÔºà„ÅîËá™Ë∫´„ÅÆ„ÇÇ„ÅÆ„Å´Â§âÊõ¥Ôºâ                      |
//+------------------------------------------------------------------+
input string webhook_url = "https://discord.com/api/webhooks/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";

//+------------------------------------------------------------------+
//| Ê±∫Ê∏àÁêÜÁî±„Ç≥„Éº„Éâ ‚Üí Êó•Êú¨Ë™û„É©„Éô„É´„Å∏„ÅÆÂ§âÊèõ                          |
//+------------------------------------------------------------------+
#define DEAL_REASON_CLIENT     0
#define DEAL_REASON_MOBILE     1
#define DEAL_REASON_WEB        2
#define DEAL_REASON_EXPERT     3
#define DEAL_REASON_SL         4
#define DEAL_REASON_TP         5
#define DEAL_REASON_SO         6
#define DEAL_REASON_ROLLOVER   7
#define DEAL_REASON_VMARGIN    8
#define DEAL_REASON_SPLIT      9

//+------------------------------------------------------------------+
//| „ÉÅ„É£„Éº„ÉàÂ∑¶‰∏ä„Å´„Éú„Çø„É≥„Çí‰ΩúÊàêÔºàÊó¢„Å´„ÅÇ„Çå„Å∞‰Ωú„Çâ„Å™„ÅÑÔºâ              |
//+------------------------------------------------------------------+
void CreateButton()
{
   if (ObjectFind(0, button_name) >= 0) return;

   ObjectCreate(0, button_name, OBJ_BUTTON, 0, 0, 0);
   ObjectSetInteger(0, button_name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, button_name, OBJPROP_XDISTANCE, 20);
   ObjectSetInteger(0, button_name, OBJPROP_YDISTANCE, 20);
   ObjectSetInteger(0, button_name, OBJPROP_XSIZE, 140);
   ObjectSetInteger(0, button_name, OBJPROP_YSIZE, 30);
   ObjectSetInteger(0, button_name, OBJPROP_BORDER_TYPE, BORDER_RAISED);
   ObjectSetInteger(0, button_name, OBJPROP_FONTSIZE, 10);
   ObjectSetString(0, button_name, OBJPROP_TEXT, button_text);
   ObjectSetInteger(0, button_name, OBJPROP_COLOR, clrDodgerBlue);
   ObjectSetInteger(0, button_name, OBJPROP_HIDDEN, false);
   ObjectSetInteger(0, button_name, OBJPROP_SELECTABLE, true);
   ObjectSetInteger(0, button_name, OBJPROP_SELECTED, false);
}

//+------------------------------------------------------------------+
//| Discord„Å∏„ÉÜ„Ç≠„Çπ„ÉàÈÄÅ‰ø°                                            |
//+------------------------------------------------------------------+
void SendMessageToDiscord(const string url, const string message)
{
  string headers = "Content-Type: application/json\r\n";
  int timeout = 5000;

  string json = "{\"content\":\"" + message + "\"}";
  char data[];
  int size = StringToCharArray(json, data, 0, WHOLE_ARRAY, CP_UTF8);
  ArrayResize(data, size - 1); // NullÁµÇÁ´ØÂâäÈô§

 #ifndef SILENT_MODE
  char result[];
  string result_headers;
  int status = WebRequest("POST", url, headers, timeout, data, result, result_headers);

  Print("„ÉÜ„Ç≠„Çπ„ÉàÈÄÅ‰ø°„Çπ„ÉÜ„Éº„Çø„Çπ: ", status);
  Print("„É¨„Çπ„Éù„É≥„ÇπÂÜÖÂÆπ: ", CharArrayToString(result));
 #endif
}

//+------------------------------------------------------------------+
//| Discord„Å∏ÁîªÂÉèÈÄÅ‰ø°Ôºàmultipart/form-dataÔºâ                        |
//+------------------------------------------------------------------+
void SendImageToDiscord(const string url, const string filename)
{
  string boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW";
  string headers = "Content-Type: multipart/form-data; boundary=" + boundary + "\r\n";
  int timeout = 5000;

  uchar file_data[];
  int file_size = FileReadImage(filename, file_data);
  if (file_size <= 0)
  {
    Print("ÁîªÂÉèË™≠„ÅøËæº„Åø„Å´Â§±Êïó");
    return;
  }

  // „Éï„Ç©„Éº„É†ÊßãÊàê
  string part1 = "--" + boundary + "\r\n"
               + "Content-Disposition: form-data; name=\"payload_json\"\r\n\r\n"
               + "{\"content\":\"„ÉÅ„É£„Éº„ÉàÁîªÂÉè\"}\r\n";

  string part2 = "--" + boundary + "\r\n"
               + "Content-Disposition: form-data; name=\"file\"; filename=\"" + filename + "\"\r\n"
               + "Content-Type: image/png\r\n\r\n";

  string part3 = "\r\n--" + boundary + "--\r\n";

  uchar data[];
  int pos = 0;

  // ÂêÑ„Éë„Éº„ÉàÁµêÂêà
  int len = StringToCharArray(part1, data, pos, WHOLE_ARRAY, CP_UTF8);
  pos += len - 1;
  ArrayResize(data, pos + StringLen(part2) + file_size + StringLen(part3) + 256);

  len = StringToCharArray(part2, data, pos, WHOLE_ARRAY, CP_UTF8);
  pos += len - 1;

  for (int i = 0; i < file_size; i++) data[pos++] = file_data[i];

  len = StringToCharArray(part3, data, pos, WHOLE_ARRAY, CP_UTF8);
  pos += len - 1;

  ArrayResize(data, pos);

 #ifndef SILENT_MODE
  uchar result[];
  string result_headers;
  int status = WebRequest("POST", url, headers, timeout, data, result, result_headers);

  Print("ÁîªÂÉèÈÄÅ‰ø°„Çπ„ÉÜ„Éº„Çø„Çπ: ", status);
  Print("„É¨„Çπ„Éù„É≥„ÇπÂÜÖÂÆπ: ", CharArrayToString(result));
 #endif // SILENT_MODE
}

//+------------------------------------------------------------------+
//| „ÉÅ„É£„Éº„Éà„ÅÆ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Çí‰øùÂ≠òÔºàÊú™‰ΩøÁî®„Å†„ÅåÊ±éÁî®ÂèØÔºâ       |
//+------------------------------------------------------------------+
bool TakeScreenshot(const string filename)
{
  return ChartScreenShot(0, filename, 1024, 768, ALIGN_RIGHT);
}

//+------------------------------------------------------------------+
//| „Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø„ÄÅ„Éê„Ç§„Éä„É™„Éá„Éº„Çø„Çí uchar ÈÖçÂàó„Å´Ë™≠„ÅøËæº„ÇÄ     |
//+------------------------------------------------------------------+
int FileReadImage(const string filename, uchar &buffer[])
{
  int handle = FileOpen(filename, FILE_READ | FILE_BIN);
  if (handle == INVALID_HANDLE)
  {
    Print("FileOpenÂ§±Êïó: ", filename);
    return -1;
  }

  int size = (int)FileSize(handle);
  ArrayResize(buffer, size);
  FileReadArray(handle, buffer, 0, size);
  FileClose(handle);
  return size;
}

//+------------------------------------------------------------------+
//| ÂàùÊúüÂåñÂá¶ÁêÜÔºàËµ∑ÂãïÊôÇÔºâ                                             |
//+------------------------------------------------------------------+
int OnInit()
{
   CreateButton(); // „Éú„Çø„É≥ÁîüÊàê
   Print("ButtonDemo ÂàùÊúüÂåñÂÆå‰∫Ü");
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| ÁµÇ‰∫ÜÊôÇÂá¶ÁêÜÔºà„ÉÅ„É£„Éº„Éà„Åã„ÇâÂâäÈô§ÊôÇÔºâ                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   ObjectDelete(0, button_name); // „Éú„Çø„É≥ÂâäÈô§
}

//+------------------------------------------------------------------+
//| „ÉÜ„Ç£„ÉÉ„ÇØÊØé„ÅÆÂá¶ÁêÜÔºà„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„Åß„ÅØÊú™‰ΩøÁî®Ôºâ                   |
//+------------------------------------------------------------------+
void OnTick() {}

//+------------------------------------------------------------------+
//| „ÉÅ„É£„Éº„Éà‰∏ä„ÅÆ„Ç§„Éô„É≥„ÉàÂá¶ÁêÜÔºà„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÂà§ÂÆöÔºâ                 |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam)
{
   if (id == CHARTEVENT_OBJECT_CLICK && sparam == button_name)
   {
      Print("üü¢ „Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„ÅüÔºÅ");
      
      int total = PositionsTotal();
      if (total == 0)
      {
         Print("üì≠ „Éù„Ç∏„Ç∑„Éß„É≥„Çí‰øùÊúâ„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ");
         return;
      }
   
      Print("üìä ‰øùÊúâ„Éù„Ç∏„Ç∑„Éß„É≥‰∏ÄË¶ß:");
      for (int i = 0; i < total; i++)
      {
         ulong ticket = PositionGetTicket(i);
         if (!PositionSelectByTicket(ticket)) continue;
   
         string symbol    = PositionGetString(POSITION_SYMBOL);
         int type         = PositionGetInteger(POSITION_TYPE);
         double lots      = PositionGetDouble(POSITION_VOLUME);
         double price     = PositionGetDouble(POSITION_PRICE_OPEN);
         double sl        = PositionGetDouble(POSITION_SL);
         double tp        = PositionGetDouble(POSITION_TP);
         double profit    = PositionGetDouble(POSITION_PROFIT);
         string type_str  = (type == POSITION_TYPE_BUY ? "Long(Ë≤∑)" : "Short(Â£≤)");
   
         //string msg = StringFormat("#%I64u [%s] %s %.2f lot @ %.5f SL=%.5f TP=%.5f Âà©Áõä=%.2fÂÜÜ",
         //            ticket, symbol, type_str, lots, price, sl, tp, profit);
                     
         string msg = StringFormat("[%s] %s %.3f SL=%.3f TP=%.3f",
                     symbol, type_str, price, sl, tp);
   
         Print(msg);
         SendMessageToDiscord(webhook_url, msg); // Discord„Å∏ÈÄÅ‰ø°
      }
   }
}

//+------------------------------------------------------------------+
//| „Éà„É¨„Éº„Éâ„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„Ç§„Éô„É≥„ÉàÔºàÊ±∫Ê∏àÊ§úÂá∫„Å®DiscordÈÄöÁü•Ôºâ       |
//+------------------------------------------------------------------+
void OnTradeTransaction(const MqlTradeTransaction &trans,
                        const MqlTradeRequest &request,
                        const MqlTradeResult &result)
{
   if (trans.type == TRADE_TRANSACTION_DEAL_ADD)
   {
      ulong deal_ticket = trans.deal;
      if (!HistoryDealSelect(deal_ticket)) return;

      int entry_type = (int)HistoryDealGetInteger(deal_ticket, DEAL_ENTRY);
      if (entry_type != DEAL_ENTRY_OUT) return; // Ê±∫Ê∏à„Åß„Å™„Åë„Çå„Å∞ÂØæË±°Â§ñ

      string symbol = HistoryDealGetString(deal_ticket, DEAL_SYMBOL);
      double volume = HistoryDealGetDouble(deal_ticket, DEAL_VOLUME);
      double price  = HistoryDealGetDouble(deal_ticket, DEAL_PRICE);
      double profit = HistoryDealGetDouble(deal_ticket, DEAL_PROFIT);
      datetime time = (datetime)HistoryDealGetInteger(deal_ticket, DEAL_TIME);
      int reason    = (int)HistoryDealGetInteger(deal_ticket, DEAL_REASON);

      string reason_str = "";
      switch (reason)
      {
         case DEAL_REASON_SL:
         case DEAL_REASON_SO: reason_str = "ÈÄÜÊåáÂÄ§";
         case DEAL_REASON_TP: reason_str = "Âà©Á¢∫ÊåáÂÄ§";
         case DEAL_REASON_CLIENT:
         case DEAL_REASON_MOBILE:
         case DEAL_REASON_WEB: reason_str = "ÊâãÂãïÊ±∫Ê∏à";
         case DEAL_REASON_EXPERT: reason_str = "EA";
         default: reason_str = "„Åù„ÅÆ‰ªñ";
      }

      //string msg = StringFormat("üí∏ Ê±∫Ê∏à[%s]: [%s] %.2f lot @ %.5f Âà©Áõä=%.2fÂÜÜ ÊôÇÂàª=%s",
      //                          reason_str, symbol, volume, price, profit,
      //                          TimeToString(time, TIME_DATE | TIME_MINUTES));
      
      string msg = StringFormat("üí∏ Ê±∫Ê∏à[%s]: [%s] %.2f lot @ %.5f Âà©Áõä=%.2fÂÜÜ ÊôÇÂàª=%s",
                                reason_str, symbol, volume, price, profit,
                                TimeToString(time, TIME_DATE | TIME_MINUTES));

      Print(msg);
      SendMessageToDiscord(webhook_url, msg); // DiscordÈÄöÁü•
   }
}
